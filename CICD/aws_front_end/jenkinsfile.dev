pipeline{
    agent {
        label 'agent1'
        //must install terraform first, version Terraform v1.3.8 on Agent
        //must install aws-cli ,and credentials configured on Agent
    }

//   parameters {
//     choice(name: 'workspace', choices:['uat', 'prod'], description: 'Workspace/environment file to use for deployment')
//     booleanParam(name: 'destroy', defaultValue: false, description: 'Destroy Terraform build?')
//   }
                               
  environment {
    HOSTED_ZONE_ID = 'GoExperts_ZoneID'
    scripts_path = "../../CICD/aws_front_end/scripts"
  }


  stages{
        
        stage('Terraform init'){
            steps{
                dir("applications/aws_front_end"){
                    sh 'whoami'
                    sh "chmod +x ${scripts_path}/*.sh"
                    sh "${scripts_path}/echo.sh"
                    }
                }
            }

        stage('Terraform init222'){
            steps{
                dir("applications/aws_front_end"){
                    sh'ls'
                    sh "${scripts_path}/init.sh"
                    }
                }
            }            
        
       
        // stage('Terraform apply'){
        //     when {
        //       not {
        //         equals expected: true, actual: params.destroy
        //       }
        //     }  
        //     steps{
        //       dir("applications/aws_frontend"){
        //         sh 'terraform apply --auto-approve'
        //         //Delete the *.tfvars with credentials
        //         sh 'rm -rf terraform.tfvars'
        //       }
        //     }
        // }

        // stage('Terraform destroy'){
        //     when {
        //       equals expected: true, actual: params.destroy
        //     }  
        //     steps{
        //       dir("applications/aws_frontend"){                
        //         sh 'terraform destroy --auto-approve'
        //         //Delete the *.tfvars with credentials
        //         sh 'rm -rf terraform.tfvars'                
        //       }
        //     }
        // }
  }

  post {
        always {
            cleanWs()
        }
        success {
            echo "WELL DONE!!"
            //bitbucketStatusNotify(buildState: 'SUCCESSFUL')
        }
        failure {
            echo "FAILED"
           // bitbucketStatusNotify(buildState: 'FAILED')
        }
  }
}